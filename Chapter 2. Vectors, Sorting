### Vectors
The most basic unit available in R to store data are vectors. Complex datasets can usually be broken down into components that are vectors. For example, in a data frame such as the murders data frame, each column is a vector.
The function c(), which stands for concatenate, is useful for creating vectors.

Another useful function for creating vectors is a function that generates sequences (seq()).
For example, seq(1,10) would write out all the numbers from 1 to 10.
In this function, the first argument defines the start, and the second defines the end.
The default is to go in increments of 1. But a third argument which defaults to 1, lets us tell how much to jump by.
For example, seq(1,10,2) would write out the odd numbers from 1 to 9.
If we want consecutive integers, we can type 1:10 and we get the integers from 1 to 10.

# Subsetting
We use [ ] to access elements of a vector.
For example, we can access the second element of codes by simply typing codes[2].

You can get more than one entry by using a multi-entry vector as an index.
So we can type codes, and then create the vector 1,3. --> codes[c(1,3)]. That way we can get the first and third element.

### Code
# We may create vectors of class numeric or character with the concatenate function
codes <- c(380, 124, 818)
country <- c("italy", "canada", "egypt")

# We can also name the elements of a numeric vector
# Note that the two lines of code below have the same result
codes <- c(italy = 380, canada = 124, egypt = 818)
codes <- c("italy" = 380, "canada" = 124, "egypt" = 818)

# We can also name the elements of a numeric vector using the names() function
codes <- c(380, 124, 818)
country <- c("italy","canada","egypt")
names(codes) <- country

# Using square brackets is useful for subsetting to access specific elements of a vector
codes[2]
codes[c(1,3)]
codes[1:2]

# If the entries of a vector are named, they may be accessed by referring to their name
codes["canada"]
codes[c("egypt","italy")]

## Vector Coercion
In general, coercion is an attempt by R to be flexible with data types.
Vectors must tbe all of the same type. So if we try to combine say numbers and characters, you might expect an error.

R offers functions to force a specific coercion.
For example, you can turn numbers into characters with the as.character() function.
We can turn them back into numberic using the as.number() function.

### DataCamp Assessment 2.1 Vectors
A vector is a series of values, all of the same type. They are the most basic data type in R and can hold numeric data, character data, or logical data. In R, you can create a vector with the concatenate (or combine) function c(). You place the vector elements separated by a comma between the parentheses. For example a numeric vector would look something like this: cost <- c(50, 75, 90, 100, 150)

As in the previous question, we are going to create a vector. Only this time, we learn to create character vectors. The main difference is that these have to be written as strings and so the names are enclosed within double quotes.
A character vector would look something like this:food <- c("pizza", "burgers", "salads", "cheese", "pasta")

We have successfully assigned the temperatures as numeric values to temp and the city names as character values to city. But can we associate the temperature to its related city? Yes! We can do so using a code we already know - names. We assign names to the numeric values.
It would look like this: cost <- c(50, 75, 90, 100, 150)
food <- c("pizza", "burgers", "salads", "cheese", "pasta")
names(cost) <- food

If we want to display only selected values from the object, R can help us do that easily.
For example, if we want to see the cost of the last 3 items in our food list, we would type: cost[3:5]
Note here, that we could also type cost[c(3,4,5)] and get the same result. The : operator helps us condense the code and get consecutive values.

What if we want to access the temperatures for any 2 specific cities?
An example: To access the cost of pizza (1st) and pasta (5th food item) in our list, the code would be: cost[c(1,5)]

The : operator helps us create sequences of numbers. For example, 32:99 would create a list of numbers from 32 to 99.
Then, if we want to know the length of this sequence, all we need to do is use the length command.

We can also create different types of sequences in R. For example, in seq(7, 49, 7), the first argument defines the start, and the second the end. The default is to go up in increments of 1, but a third argument lets us tell it by what interval.

# Create a vector containing all the positive odd numbers smaller than 100.
# The numbers should be in ascending order
seq(1, 100, 2)

The second argument of the function seq is actually a maximum, not necessarily the end. So if we type
seq(7, 50, 7) we actually get the same vector of integers as if we type seq(7, 49, 7).
This can be useful because sometimes all we want are sequential numbers that are smaller than some value.

# We can create a vector with the multiples of 7, smaller than 50 like this 
seq(7, 49, 7) 

# But note that the second argument does not need to be the last number
# It simply determines the maximum value permitted
# so the following line of code produces the same vector as seq(7, 49, 7)
seq(7, 50, 7)

# Create a sequence of numbers from 6 to 55, with 4/7 increments and determine its length
length(seq(6, 55, 4/7))

The seq() function has another useful argument. The argument length.out. This argument lets us generate sequences that are increasing by the same amount but are of the prespecified length.

For example, this line of code
x <- seq(0, 100, length.out = 5)
produces the numbers 0, 25, 50, 75, 100.

We have discussed the numeric class. We just saw that the seq function can generate objects of this class. For another example, type: class(seq(1, 10, 0.5)) into the console and note that the class is numeric. 

R has another type of vector we have not described, the integer class. You can create an integer by adding the letter L after a whole number. If you type: class(3L) in the console, you see this is an integer and not a numeric. 

For most practical purposes, integers and numerics are indistinguishable. For example 3, the integer, minus 3 the numeric is 0. To see this type this in the console: 3L - 3.
The main difference is that integers occupy less space in the computer memory, so for big computations using integers can have a substantial impact.

The concept of coercion is a very important one. We learned that when an entry does not match what an R function is expecting, R tries to guess what we meant before throwing an error. This might get confusing at times.

As we've discussed in earlier questions, there are numeric and character vectors. The character vectors are placed in quotes and the numerics are not.

We can avoid issues with coercion in R by changing characters to numerics and vice-versa. This is known as typecasting. The code, as.numeric(x) helps us convert character strings to numbers. There is an equivalent function that converts its argument to a string, as.character(x).

### Sorting
The function sort() sorts a vector in increasing order.
The function order() produces the indices needed to obtain the sorted vector, e.g. a result of  2 3 1 5 4 means the sorted vector will be produced by listing the 2nd, 3rd, 1st, 5th, and then 4th item of the original vector.
The function rank() gives us the ranks of the items in the original vector.
The function max() returns the largest value, while which.max() returns the index of the largest value. The functions min() and which.min() work similarly for minimum values.

## Code
library(dslabs)
data(murders)
sort(murders$total)

x <- c(31, 4, 15, 92, 65)
x
sort(x)    # puts elements in order

index <- order(x)    # returns index that will put x in order
x[index]    # rearranging by this index puts elements in order
order(x)

murders$state[1:10]
murders$abb[1:10]

index <- order(murders$total)
murders$abb[index]    # order abbreviations by total murders

max(murders$total)    # highest number of total murders
i_max <- which.max(murders$total)    # index with highest number of murders
murders$state[i_max]    # state name with highest number of total murders

x <- c(31, 4, 15, 92, 65)
x
rank(x)    # returns ranks (smallest to largest)

## Data Camp
