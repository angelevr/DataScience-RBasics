### Index
We can use logicals to index vectors.
Using the function sum()on a logical vector returns the number of entries that are true.
The logical operator “&” makes two logicals true only when they are both true.

# defining murder rate as before
murder_rate <- murders$total / murders$population * 100000

# creating a logical vector that specifies if the murder rate in that state is less than or equal to 0.71
index <- murder_rate <= 0.71

# determining which states have murder rates less than or equal to 0.71
murders$state[index]

# calculating how many states have a murder rate less than or equal to 0.71
sum(index)

# creating the two logical vectors representing our conditions
west <- murders$region == "West"
safe <- murder_rate <= 1

# defining an index and identifying states with both conditions true
index <- safe & west
murders$state[index]

### Index Functions
Three very useful functions related to indexing that use logical operators: which, match, and %in%.
which() gives us the entries of a logical vector that are true.
For example: x <- c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE)
which(x)    # returns indices that are TRUE

This can be useful, for example, when the logical vector that we want to use to index is very long and we only want it for indexing, so we can just keep the actual indices, not the entire vector of logicals.
# to determine the murder rate in Massachusetts we may do the following
index <- which(murders$state == "Massachusetts")
index
murder_rate[index]

match() looks for entries in a vector and returns the index needed to access them.

# to obtain the indices and subsequent murder rates of New York, Florida, Texas, we do:
index <- match(c("New York", "Florida", "Texas"), murders$state)
index
murders$state[index]
murder_rate[index]

x <- c("a", "b", "c", "d", "e")
y <- c("a", "d", "f")
y %in% x

If rather than an index, we want to know whether or not each element of a first vector is in a second vector, we use the function %in%.
# to see if Boston, Dakota, and Washington are states
c("Boston", "Dakota", "Washington") %in% murders$state

### Data Camp
# Store the murder rate per 100,000 for each state, in `murder_rate`
murder_rate <- murders$total / murders$population * 100000

# Store the `murder_rate < 1` in `low` 
low <- murder_rate < 1

Note that if we want to know which entries of a vector are lower than a particular value we can use code like this:
small <- murders$population < 1000000
murders$state[small]
The code above shows us the states with populations smaller than one million.

# Names of states with murder rates lower than 1
murders$state[low]

# Create a vector ind for states in the Northeast and with murder rates lower than 1. 
ind <- low & murders$region == 'Northeast'

# Names of states in `ind` 
murders$state[ind]

# Compute the average murder rate using `mean` and store it in object named `avg`
avg <- mean(murder_rate)

# How many states have murder rates below avg ? Check using sum 
sum(murder_rate<avg)

# Store the 3 abbreviations in a vector called `abbs` (remember that they are character vectors and need quotes)
abbs <- c('AK','MI','IA')

# Match the abbs to the murders$abb and store in ind
ind <- match(abbs, murders$abb)

# Print state names from ind
murders$state[ind]

If rather than an index we want a logical that tells us whether or not each element of a first vector is in a second, we can use the function %in%. For example:

x <- c(2, 3, 5)
y <- c(1, 2, 3, 4)
x%in%y
Gives us two TRUE followed by a FALSE because 2 and 3 are in y but 5 is not.

# Store the 5 abbreviations in `abbs`. (remember that they are character vectors)
abbs <- c("MA", "ME", "MI", "MO", "MU")

# Use the %in% command to check if the entries of abbs are abbreviations in the the murders data frame
abbs %in% murders$abb
# Store the 5 abbreviations in abbs. (remember that they are character vectors)
abbs <- c("MA", "ME", "MI", "MO", "MU") 

# Use the `which` command and `!` operator to find out which index abbreviations are not actually part of the dataset and store in `ind`
ind <- which(!abbs%in%murders$abb)

# Names of abbreviations in `ind`
abbs[ind]

### Basic Data Wrangling
dplyr() package provides intuitive functionality for working with tables.

To change a data table by adding a new column, or changing an existing one, we use the mutate() function.
To filter the data by subsetting rows, we use the function filter().
To subset the data by selecting specific columns, we use the select() function.
We can perform a series of operations by sending the results of one function to another function using the pipe operator, %>%.

# installing and loading the dplyr package
install.packages("dplyr")
library(dplyr)

# adding a column with mutate
library(dslabs)
data("murders")
murders <- mutate(murders, rate = total / population * 100000)

# subsetting with filter
filter(murders, rate <= 0.71)

# selecting columns with select
new_table <- select(murders, state, region, rate)

# using the pipe
murders %>% select(state, region, rate) %>% filter(rate <= 0.71)

### Creating Data Frames
For many of the analyses we perform with dplyr we will find it necessary to create data frames in R. You can do this using the data.frame function.

### Data Camp
Load the dplyr package and the murders dataset.
library(dplyr)
library(dslabs)
data(murders)
You can add columns using the dplyr function mutate. This function is aware of the column names and inside the function you can call them unquoted. 
Like this:
murders <- mutate(murders, population_in_millions = population / 10^6)

Note that we can write population rather than murders$population. The function mutate knows we are grabing columns from murders.

# Redefine murders so that it includes a column named rate with the per 100,000 murder rates
murders <- mutate(murders, rate=total/murders$population*100000)

Note that if rank(x) gives you the ranks of x from lowest to highest, rank(-x) gives you the ranks from highest to lowest.

# Note that if you want ranks from highest to lowest you can take the negative and then compute the ranks 
x <- c(88, 100, 83, 92, 94)
rank(-x)

# Defining rate
rate <-  murders$total/ murders$population * 100000

# Redefine murders to include a column named rank
# with the ranks of rate from highest to lowest
murders <- mutate(murders,rank=rank(-rate))

With dplyr we can use select to show only certain columns. For example with this code we would only show the states and population sizes:
select(murders, state, population)

# Load dplyr
library(dplyr)

# Use select to only show state names and abbreviations from murders
select(murders, state, abb)

The dplyr function filter is used to choose specific rows of the data frame to keep. Unlike select which is for columns, filter is for rows. For example you can show just the New York row like this:
filter(murders, state == "New York")
You can use other logical vectors to filter rows.

# Add the necessary columns
murders <- mutate(murders, rate = total/population * 100000, rank = rank(-rate))

# Filter to show the top 5 states with the highest murder rates
filter(murders,rate,rank<=5)

We can remove rows using the != operator. For example to remove Florida we would do this:
no_florida <- filter(murders, state != "Florida")

We can also use the %in% to filter with dplyr. For example you can see the data from New York and Texas like this:
filter(murders, state %in% c("New York", "Texas"))

# Create a new data frame called murders_nw with only the states from the northeast and the west
murders_nw <- filter(murders, region %in% c('Northeast','West'))

# Number of states (rows) in this category 
nrow(murders_nw)

Suppose you want to live in the Northeast or West and want the murder rate to be less than 1. We want to see the data for the states satisfying these options. Note that you can use logical operators with filter:
filter(murders, population < 5000000 & region == "Northeast")

# add the rate column
murders <- mutate(murders, rate =  total / population * 100000, rank = rank(-rate))

# Create a table, call it my_states, that satisfies both the conditions 
my_states <- filter(murders, region %in% c('Northeast','West') & rate < 1)

# Use select to show only the state name, the murder rate and the rank
select(my_states,state,rate,rank)

The pipe %>% can be used to perform operations sequentially without having to define intermediate objects. After redefining murder to include rate and rank.

library(dplyr)
murders <- mutate(murders, rate =  total / population * 100000, rank = (-rate))
in the solution to the previous exercise we did the following:

# Created a table 
my_states <- filter(murders, region %in% c("Northeast", "West") & rate < 1)

# Used select to show only the state name, the murder rate and the rank
select(my_states, state, rate, rank)
The pipe %>% permits us to perform both operation sequentially and without having to define an intermediate variable my_states

For example we could have mutated and selected in the same line like this:

mutate(murders, rate =  total / population * 100000, rank = (-rate)) %>% 
    select(state, rate, rank)
Note that select no longer has a data frame as the first argument. The first argument is assumed to be the result of the operation conducted right before the %>%

# Load library
library(dplyr)

## Define the rate column
murders <- mutate(murders, rate =  total / population * 100000, rank = rank(-rate))

# show the result and only include the state, rate, and rank columns, all in one line, in that order
filter(murders, region %in% c("Northeast", "West") & rate < 1 )%>% 
    select(state, rate, rank)
    
# Loading the libraries
library(dplyr)
data(murders)

# Create new data frame called my_states (with specifications in the instructions)
my_states <- murders %>% mutate(rate=total/murders$population*100000, rank=rank(-rate)) %>% filter(region %in% c('Northeast','West') & rate <1) %>% select(state,rate,rank)

### Basic Plots
We can create a simple scatterplot using the function plot().
Histograms are graphical summaries that give you a general overview of the types of values you have.  In R, they can be produced using the hist() function.
Boxplots provide a more compact summary of a distribution than a histogram and are more useful for comparing distributions. They can be produced using the boxplot() function.

library(dplyr)
library(dslabs)
data("murders")

# a simple scatterplot of total murders versus population
x <- murders$population /10^6
y <- murders$total
plot(x, y)

# a histogram of murder rates
murders <- mutate(murders, rate = total / population * 100000)
hist(murders$rate)

# boxplots of murder rates by region
boxplot(rate~region, data = murders)

We made a plot of total murders versus population and noted a strong relationship: not surprisingly states with larger populations had more murders. You can run the code in the console to get the plot.

library(dslabs)
data(murders)

population_in_millions <- murders$population/10^6
total_gun_murders <- murders$total

plot(population_in_millions, total_gun_murders)
Note that many states have populations below 5 million and are bunched up in the plot. We may gain further insights from making this plot in the log scale.

# Load the datasets and define some variables
library(dslabs)
data(murders)

population_in_millions <- murders$population/10^6
total_gun_murders <- murders$total

plot(population_in_millions, total_gun_murders)

# Transform population (not population in millions) using the log10 transformation and save to object log10_population
log10_population <-log10(murders$population)

# Transform total gun murders using log10 transformation and save to object log10_total_gun_murders
log10_total_gun_murders <- log10(total_gun_murders)

# Create a scatterplot with the log scale transformed population and murders 
plot(log10_population,log10_total_gun_murders)

# Store the population in millions and save to population_in_millions 
population_in_millions <- murders$population/10^6

# Create a histogram of this variable
hist(population_in_millions)

Now we are going to make boxplots. Boxplots are useful when we want a summary of several variables or several strata of the same variables. Making too many histograms can become too cumbersome.
# Create a boxplot of state populations by region for the murders dataset
boxplot(population~region, data=murders)

### Assessment
library(dslabs)
data(heights)
options(digits = 3) 

# determine the average height in this dataset
mean(heights$height)

# create a logical vector ind with the indices for those individuals who are above average height
ind <- heights$height > 68.3
ind
sum(ind)

# how many individuals in the dataset are above average height and are female?
female <- heights$sex == "Female"
index <- ind & female
sum(index)

# if you use mean() on a logical (TRUE/FALSE) vector, it returns the proportion of observations that are TRUE.
# what proportion of individuals in the dataset are female?
mean(female)

# determine the minimum height
min(heights$height)

# use the match() to determine the index of the first individual with the minimum height
match(50,heights$height)

# subset the sex column of the dataset by the index in 4b to determine the individual's sex
heights$sex[match(50,heights$height)]

# determine the maximum height
max(heights$height)

# Which integer values are between the maximum and minimum heights? For example, if the minimum height is 10.2 and the maximum height is 20.8, your answer should be x <- 11:20 to capture the integers in between those values. (If either the maximum or minimum height are integers, include those values too.)

# Write code to create a vector x that includes the integers between the minimum and maximum heights (as numbers).
x <- 50:82

# How many of the integers in x are NOT heights in the dataset?
sum(!(x %in% heights$height))

# Using the heights dataset, create a new column of heights in centimeters named ht_cm. Recall that 1 inch = 2.54 centimeters. Save the resulting dataset as heights2.
library(dplyr)
heights <- mutate(heights, ht_cm = height*2.54)
head(heights)

# What is the height in centimeters of the 18th individual (index 18)?
heights$ht_cm[18]

# What is the mean height in centimeters?
mean(heights$ht_cm)

# Create a data frame females by filtering the heights2 data to contain only female individuals.
females <- filter(heights, sex == "Female")
head(females)

# How many females are in the heights2 dataset?
nrow(females)

# What is the mean height of the females in centimeters?
mean(females$ht_cm)

# The olive dataset in dslabs contains composition in percentage of eight fatty acids found in the lipid fraction of 572 Italian olive oils:
library(dslabs)
data(olive)
head(olive)

# Plot the percent palmitic acid versus palmitoleic acid in a scatterplot. What relationship do you see?
palmitic_acid <- olive$palmitic
palmitoleic_acid <- olive$palmitoleic
plot(palmitic_acid,palmitoleic_acid)

# Create a histogram of the percentage of eicosenoic acid in olive.
hist(olive$eicosenoic)

# Make a boxplot of palmitic acid percentage in olive with separate distributions for each region.

# Which region has the highest median palmitic acid percentage?
boxplot(palmitic ~ region, data = olive)
