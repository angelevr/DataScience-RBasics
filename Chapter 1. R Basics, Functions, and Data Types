## Packages
# to install a single package
install.packages("")

# to install two packages at the same time
install.packages(c("", ""))

# to see the list of all installed packages
installed.packages()

You can add the option dependencies = TRUE, which tells R to install the other things that are necessary for the package or packages to run smoothly. Otherwise you may need to install additional packages to unlock the full functionality of a package.

pipe = %>% and it comes from the tidyverse package.

## Keyboard shortcuts
Save a script: Ctrl+S on Windows and Command+S on Mac
Run an entire script:  Ctrl+Shift+Enter on Windows Command+Shift+Return on Mac, or click "Source" on the editor pane
Run a single line of script: Ctrl+Enter on Windows and Command+Return on Mac while the cursor is pointing to that line, or select the chunk and click "run"
Open a new script: Ctrl+Shift+N on Windows and Command+Shift+N on Mac

## Functions
ls() is a function that shows you the names of the objects you save.
So for example if you assign a <- 1, b <- -1 and c <- 2, then ls() would show "a", "b", "c".

print() function prints the argument you type.
You can type print(variable_name) to see the value stored in a variable.

## Code example: solve the equation x2+x-1=0
# assigning values to variables
a <-1
b <-1
c <--1

# solving the quadratic equation
(-b + sqrt(b^2 - 4*a*c))/(2*a)
(-b - sqrt(b^2 - 4*a*c))/(2*a)

Once you define variables, a data analysis process can usually be described as a series of functions applied to the data.

exp() stands for expotential.
so exp(1) would equal to 2.718.
log(2.718) equals to 1.
These are inverse functions.
At the same time, log(exp(1)) would also equal to 1.
It's important to remember that functions are evaluated from the insite out when you nest them.

If you are not sure how a function works, you can find out using help().
If you already know how the function works but need a quick reminder of the arguments, you can use the args() function.
e.g. args(log)
     function(x,base=exp(1))
     NULL

You can change the default value by simply assigning another value. For example, if instead of natural log we want to get log base 2, we would type:
log(8, base=2) and it would equal to 3.
Likewise, log(8,2) also equals to 3.

There are also other mathematical objects that are pre-built, such as the constant for pi and the infinity number.

### DataCamp Exercise
## Using variables 1
What is the sum of the first n positive integers?
We can use the formula n(n+1)/2 to quickly compute this quantity.

# Here is how you compute the sum for the first 20 integers
20*(20+1)/2 

# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2

n <- 25
n*(n+1)/2

# Write a code to calculate the sum of the first 100 integers
n <- 100
n*(n+1)/2

## Using variables 2
What is the sum of the first 1000 positive integers?
n <- 1000
n*(n+1)/2

### Functions
Run this code:
n <- 1000
x <- seq(1,n)
sum(x)

Based on the result, what do you think the functions seq and sum do?
seq creates a list of numbers and sum adds them up.

### Nested function calls 1
In math and programming we say we evaluate a function when we replace arguments with specific values. So if we type log2(16) we evaluate the log2 function to get the log base 2 of 16 which is 4.
In R is often useful to evaluate a function inside another function.
For example, sqrt(log2(16)) will calculate the log to the base 2 of 16 and then compute the square root of that value. So the first evaluation gives a 4 and this gets evaluated by sqrt to give the final answer of 2.

# log to the base 2 
log2(16)

# sqrt of the log to the base 2 of 16:
sqrt(log2(16))

# Compute log to the base 10 (log10) of the sqrt of 100. Do not use variables.
sqrt(log10(100))

### Nested functions call 2
Which function will always return the numeric value stored in x?
log(exp(x))

### Back to Edx course
Variables in R can be of different types. For example, we need to distinguish numbers from character strings and tables from simple list of numbers.
The function class() helps us determine the type of an object.
The most common way of storing data sets in R is with data frames. Conceptually, we can think of data frames as tables. Rows represent observations, and different variables are represented by different columns.
Data frames are particularly useful for data sets because we can combine different types into one single object.
To find more information about an object, we can use the str() function, which stands for structure, and it shows us the structure of an object.

We can also show the first six lines of this data frame using the function head(). 

Factors are useful for storing what is called categorical data. Regions for example are categorical.
To access data from columns of a data frame, we use the dollar sign symbol, $, which is called the accessor.
A vector is an object consisting of several entries and can be a numeric vector, a character vector, or a logical vector.

## Code
# loading the dslabs package and the murders dataset
library(dslabs)
data(murders)

# determining that the murders dataset is of the "data frame" class
class(murders)
# finding out more about the structure of the object
str(murders)
# showing the first 6 lines of the dataset
head(murders)

# using the accessor operator to obtain the population column
murders$population
# displaying the variable names in the murders dataset
names(murders)
# determining how many entries are in a vector
pop <- murders$population
length(pop)
# vectors can be of class numeric and character
class(pop)
class(murders$state)

# logical vectors are either TRUE or FALSE
z <- 3 == 2
z
class(z)

# factors are another type of class
class(murders$region)
# obtaining the levels of a factor
levels(murders$region)

### DataCamp - Data Types
Using the str() command, we saw that the region column stores a factor. You can corroborate this by using the class command on the region column.
The function levels shows us the categories for the factor.
For this question we will combine two functions, in a nested way, to determine the number of unique categories. Use the functions levels and length to determine the number of regions defined by this dataset and contained in murders$region.

# We can see the class of the region variable using class
class(murders$region)

# Determine the number of regions included in this variable 
length(levels(murders$region))

# The "c" in `c()` is short for "concatenate," which is the action of connecting items into a chain
# The function `c()` connects all of the strings within it into a single vector, which we can assign to `x`
x <- c("a", "a", "b", "b", "b", "c")
# Here is an example of what the table function does
table(x)
x
a    b    c
2    3    1

so:
table(murders$region)

    Northeast         South North Central          West 
            9            17            12            13

